
(function(){/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

const pdfjsVersion = '4.3.148';
const pdfjsBuild = '2c19754c';

/* eslint-disable-next-line no-var */
var globalScope = typeof self !== 'undefined' ? self : this;
function getGlobalScope() {
  return globalScope;
}

/**
 * NOTE: This is used to only declare properties for already existing
 *       global objects, such as (DOM) `window`.
 */
function declareGlobal(object) {
  for (const key of Object.getOwnPropertyNames(object)) {
    if (globalScope.hasOwnProperty(key)) {
      continue;
    }
    globalScope[key] = object[key];
  }
}

/**
 * Creates an event that hopefully will behave correctly for various platforms.
 * @param {string} name The name of the event that should be created.
 * @param {{bubbles: boolean, cancelable: boolean, detail: any}} details
 * @returns {Event}
 */
function createEvent(name, details) {
  if (typeof Event === 'function') {
    return new Event(name, details);
  }
  details = details || {};
  const event = document.createEvent('Event');
  event.initEvent(name, details.bubbles === true, details.cancelable === true);
  if (details.detail) {
    event.detail = details.detail;
  }
  return event;
}

/**
 * Dispatches an event on the provided `target`.
 * @param {object} target
 * @param {string} name The name of the event that should be dispatched.
 * @param {{bubbles: boolean, cancelable: boolean, detail: any}} details
 */
function dispatchEvent(target, name, details) {
  target.dispatchEvent(createEvent(name, details));
}

function isNodeJS() {
  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
}

exports.pdfjsVersion = pdfjsVersion;
exports.pdfjsBuild = pdfjsBuild;
exports.getGlobalScope = getGlobalScope;
exports.declareGlobal = declareGlobal;
exports.createEvent = createEvent;
exports.dispatchEvent = dispatchEvent;
exports.isNodeJS = isNodeJS;
}).call(this);
(function(root, factory) {
  {
    factory((root.pdfjsWorker = {}));
  }
})(typeof self !== 'undefined' ? self : this, function(pdfjsWorker) {
var __TURBOPACK__imported__module__$5b$node_modules$5d$es6$2dpromise$2f$lib$2f$es6$2dpromise$2fpromise$2e$js__$5b$auto$5d$__ = require("node_modules/es6-promise/lib/es6-promise/promise.js");
var __TURBOPACK__imported__module__$5b$node_modules$5d$pdfjs$2ddist$2f$build$2f$pdf$2e$js__$5b$isolatedWorker$5d$__ = require("node_modules/pdfjs-dist/build/pdf.js [isolatedWorker]");
var promise = __TURBOPACK__imported__module__$5b$node_modules$5d$es6$2dpromise$2f$lib$2f$es6$2dpromise$2fpromise$2e$js__$5b$auto$5d$__;
{
    pdfjsWorker.pdfjsVersion = __TURBOPACK__imported__module__$5b$node_modules$5d$pdfjs$2ddist$2f$build$2f$pdf$2e$js__$5b$isolatedWorker$5d$__.pdfjsVersion;
    pdfjsWorker.pdfjsBuild = __TURBOPACK__imported__module__$5b$node_modules$5d$pdfjs$2ddist$2f$build$2f$pdf$2e$js__$5b$isolatedWorker$5d$__.pdfjsBuild;
    var handler = new __TURBOPACK__imported__module__$5b$node_modules$5d$pdfjs$2ddist$2f$build$2f$pdf$2e$js__$5b$isolatedWorker$5d$__.MessageHandler("worker", null);
    globalThis.addEventListener("message", handler.onMessage.bind(handler));
    handler.on("test", function() {});
    handler.on("loadScript", function(data) {
        return new promise(function(resolve, reject) {
            try {
                import(data.scriptUrl).then(resolve, reject);
            } catch (e) {
                reject(e);
            }
        });
    });
}
});
